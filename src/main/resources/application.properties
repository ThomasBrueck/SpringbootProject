spring.application.name=Sprint

#Mediante H2
#spring.jpa.hibernate.ddl-auto=create
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#
#spring.sql.init.mode=always
#spring.jpa.defer-datasource-initialization=true
#
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2


##Esto tiraba error, no realizaba la conexion a la db de Neon.fetch
##PostgreSQL con Neon.tech
spring.jpa.hibernate.ddl-auto=update
###Pongo username de Neon.tech
spring.datasource.username=neondb_owner
###Pongo password de Neon.tech
spring.datasource.password=npg_KSoXEi03JjMs
###Size del Connection Pool
spring.datasource.hikari.maximum-pool-size=20
###Para que esto no me arroje error, agrego la dependencia de PostgreSQL JDBC Driver
spring.datasource.driver-class-name=org.postgresql.Driver
##Url de la base de datos de Neon.fetch y al final '/neondb' que es el nombre de la base de datos
spring.datasource.url=jdbc:postgresql://ep-fancy-mouse-a5ljeeg6-pooler.us-east-2.aws.neon.tech/neondb
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Esto tiene que ver con RESTAPI
app.security.secretkey=universidadicesiuniversidadicesiuniversidadicesi
app.security.expirationMinutes=30

#Posgresql conectado a este proyecto mediante el archivo docker-compose.yml
#spring.jpa.hibernate.ddl-auto=create
#spring.datasource.username=user
#spring.datasource.password=password
#spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5433/db
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
app.pagination.size=3

#Esto me carga los datos del data.sql en la db de postgres
#spring.sql.init.mode=always
#spring.jpa.defer-datasource-initialization=true